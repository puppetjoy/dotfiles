#!/usr/bin/env ruby
#
# sway-layout-manager
# Automatically manage Sway windows like the xmonad tall layout
#

require 'json'
require 'shellwords'

class SwayOutput
  attr_reader :rect
  def initialize(node)
    @rect = node['rect']
  end
end

class SwayWorkspace
  attr_reader :name

  def initialize(node, output)
    @output = output
    @name   = node['name']
    @layout = node['layout']
    @nodes  = node['nodes']
    @rect   = node['rect']
    @swaycmd_queue = []

    # Read custom attributes from name
    read_attrs
  end

  def self.all(tree = SwayWorkspace.tree, current_output = nil)
    tree['nodes'].map do |node|
      if node['nodes']
        case node['type']
        when 'output'
          SwayWorkspace.all(node, SwayOutput.new(node))
        when 'workspace'
          [SwayWorkspace.new(node, current_output)] + SwayWorkspace.all(node, current_output)
        else
          SwayWorkspace.all(node, current_output)
        end
      else
        []
      end
    end.flatten
  end

  def self.focused
    focused_ws_name = SwayWorkspace.focused_ws_name
    SwayWorkspace.all.find { |ws| ws.name == focused_ws_name }
  end

  def self.exec_swaymsg(cmd)
    shellcmd = ['swaymsg', '--', cmd].shelljoin
    puts "Running: #{shellcmd}"
    responses = JSON.parse(`#{shellcmd}`)
    responses.each_with_index do |response, i|
      STDERR.puts "Error in command #{i + 1} of #{responses.length}: #{response['error']}" unless response['success']
    end
  end

  def self.parse_attrs(name)
    if name =~ /\d+\[(\d*)(H?)(R?)(F?)\]:/
      n = $1.to_i
      n = n > 0 ? n : 1
      halved = $2 == 'H'
      reflected = $3 == 'R'
      flipped = $4 == 'F'
    else
      n = 1
      halved = false
      reflected = false
      flipped = false
    end
    [n, halved, reflected, flipped]
  end

  def self.reset_focused(default_names)
    focused_ws = SwayWorkspace.focused
    focused_ws_num = focused_ws.name.sub(/^(\d+).*/, '\1').to_i
    (want_n, want_halved, want_reflected, want_flipped) = SwayWorkspace.parse_attrs(default_names[focused_ws_num - 1])

    if (focused_ws.flipped? and !want_flipped) or (want_flipped and !focused_ws.flipped?)
      focused_ws.flip
      focused_ws = SwayWorkspace.focused
    end

    if (focused_ws.reflected? and !want_reflected) or (want_reflected and !focused_ws.reflected?)
      focused_ws.reflect
      focused_ws = SwayWorkspace.focused
    end

    if (focused_ws.halved? and !want_halved) or (want_halved and !focused_ws.halved?)
      focused_ws.toggle_halved
      focused_ws = SwayWorkspace.focused
    end

    if focused_ws.master_cap != want_n
      focused_ws.set_master_cap(want_n)
      focused_ws = SwayWorkspace.focused
    end

    focused_ws.balance
  end

  def master_cap
    @n
  end

  def halved?
    @halved
  end

  def reflected?
    @reflected
  end

  def flipped?
    @flipped
  end

  def focus
    swaymsg(['workspace', @name])
    commit
  end

  def refresh
    layout
    commit
  end

  def set_master_cap(n)
    @n = n if n > 0
    write_attrs
    layout
    commit
  end

  def inc_master_cap(n)
    set_master_cap(@n + n)
  end

  def toggle_halved
    @halved = !@halved
    write_attrs
    reset_master_size
    commit
  end

  def reflect
    first  = container(0)
    second = container(1)

    resize_axis = flipped? ? 'height' : 'width'

    if first and second
      swaymsg(['swap', 'container', 'with', 'con_id', second['id']], first)
      swaymsg(['resize', 'set', resize_axis, first['rect'][resize_axis], 'px'], first)
    end

    @reflected = !@reflected
    write_attrs

    commit
  end

  def flip
    outer_container        = container(0)
    first_stack_windows    = windows(outer_container).first
    second_stack_container = container(1)
    second_stack_windows   = windows(second_stack_container).first

    if flipped?
      second_to_first = 'up'
      first_to_second = 'right'
    else
      second_to_first = 'left'
      first_to_second = 'down'
    end

    swaymsg(['move', second_to_first], second_stack_container) if second_stack_container
    swaymsg(['layout', 'toggle', 'split'], first_stack_windows) if first_stack_windows
    swaymsg(['split', 'toggle'], outer_container) if outer_container
    swaymsg(['move', first_to_second], second_stack_container) if second_stack_container
    swaymsg(['layout', 'toggle', 'split'], second_stack_windows) if second_stack_windows

    # Window moves change focus; set it back
    keep_focus

    # Retain ratio of master to stack size
    if first_stack_windows
      if flipped?
        source_size_axis = 'height'
        target_size_axis = 'width'
      else
        source_size_axis = 'width'
        target_size_axis = 'height'
      end
      source_size_ratio = first_stack_windows['rect'][source_size_axis].to_f / @rect[source_size_axis]
      swaymsg(['resize', 'set', target_size_axis, (@rect[target_size_axis] * source_size_ratio).round, 'px'], first_stack_windows)
    end

    @flipped = !@flipped
    write_attrs

    commit
  end

  def balance
    # Rebuild master and stack containers
    if flipped?
      windows(container(0)).each_with_index do |window, i|
        swaymsg(['move', 'up'], window)
        swaymsg(['layout', 'splith'], window) if i == 0
      end

      windows(container(1)).reverse.each_with_index do |window, i|
        swaymsg(['move', 'down'], window)
        swaymsg(['splith'], window) if i == 0
      end
    else
      windows(container(0)).reverse.each_with_index do |window, i|
        swaymsg(['move', 'left'], window)
        swaymsg(['move', 'right'], window)
        swaymsg(['layout', 'splitv'], window) if i == 0
      end

      windows(container(1)).reverse.each_with_index do |window, i|
        swaymsg(['move', 'right'], window)
        swaymsg(['splitv'], window) if i == 0
      end
    end

    reset_master_size

    # Window moves change focus; set it back
    keep_focus

    commit
  end

  def swap_up
    windows = ordered_windows
    focused_index = windows.find_index { |window| window['focused'] }
    focused = windows[focused_index]
    needs_refresh = false

    if focused_index == 0
      swaymsg(['mark', '--add', '_last'], windows.last)
      swaymsg(['move', 'mark', '_last'], focused)

      # Window moves change focus; set it back
      keep_focus

      # Tell the caller to fix the layout messed up by this move
      needs_refresh = true
    else
      swaymsg(['swap', 'container', 'with', 'con_id', windows[focused_index - 1]['id']], focused)
    end

    commit

    needs_refresh
  end

  def swap_down
    windows = ordered_windows
    focused_index = windows.find_index { |window| window['focused'] }
    focused = windows[focused_index]
    needs_refresh = false

    if focused_index == windows.length - 1
      # Move the window to after the first
      swaymsg(['mark', '--add', '_first'], windows.first)
      swaymsg(['move', 'mark', '_first'], focused)

      # Now move it to the first
      swaymsg(['mark', '--add', '_first'], focused)
      swaymsg(['move', 'mark', '_first'], windows.first)

      # Window moves change focus; set it back
      keep_focus

      # Tell the caller to fix the layout messed up by this move
      needs_refresh = true
    else
      swaymsg(['swap', 'container', 'with', 'con_id', windows[focused_index + 1]['id']], focused)
    end

    commit

    needs_refresh
  end

  def swap_master
    swaymsg(['swap', 'container', 'with', 'con_id', windows(master).first['id']], focused_window)
    commit
  end

  def resize_master(change_ppt)
    change = change_ppt > 0 ? 'grow' : 'shrink'
    resize_axis = flipped? ? 'height' : 'width'
    master_window = windows(master).first
    swaymsg(['resize', change, resize_axis, change_ppt.abs, 'ppt'], master_window) if master_window
    commit
  end

  def resize_child(change_ppt)
    change = change_ppt > 0 ? 'grow' : 'shrink'
    resize_axis = flipped? ? 'width' : 'height'
    swaymsg(['resize', change, resize_axis, change_ppt.abs, 'ppt'])
    commit
  end

  def focus_next_window
    window = focused_window
    master_windows = windows(master)
    stack_windows  = windows(stack)

    if window == master_windows.last and stack_windows.first
      swaymsg(['focus'], stack_windows.first)
    elsif window == stack_windows.last and master_windows.first
      swaymsg(['focus'], master_windows.first)
    else
      swaymsg(['focus', 'next'])
    end

    commit
  end

  def focus_prev_window
    window = focused_window
    master_windows = windows(master)
    stack_windows  = windows(stack)

    if window == master_windows.first and stack_windows.last
      swaymsg(['focus'], stack_windows.last)
    elsif window == stack_windows.first and master_windows.last
      swaymsg(['focus'], master_windows.last)
    else
      swaymsg(['focus', 'prev'])
    end

    commit
  end

  private

  def self.tree
    JSON.parse(`swaymsg -t get_tree`)
  end

  def self.focused_ws_name
    JSON.parse(`swaymsg -t get_workspaces`).find { |ws| ws['focused'] }['name']
  end

  # Queue a sway(5) command to be batched and executed later
  def swaymsg(args, window = nil)
    args.unshift("[con_id=#{window['id']}]") if window
    swaycmd = args.map(&:to_s).map { |arg| arg =~ /\s/ && arg !~ /^\[.*\]$/ ? "'#{arg}'" : arg }.join(' ')
    @swaycmd_queue << swaycmd
  end

  # Execute the queued sway(5) commands
  def commit
    SwayWorkspace.exec_swaymsg(@swaycmd_queue.join(';'))
    @swaycmd_queue = []
  end

  def read_attrs
    (@n, @halved, @reflected, @flipped) = SwayWorkspace.parse_attrs(@name)
  end

  def write_attrs
    attrs = ''
    attrs << "#{@n}" if @n > 1
    attrs << 'H' if @halved
    attrs << 'R' if @reflected
    attrs << 'F' if @flipped
    attrs = "[#{attrs}]" unless attrs.empty?

    new_name = @name.sub(/^(\d+)(\[\S*\])?:/, "\\1#{attrs}:")
    swaymsg ['rename', 'workspace', @name, 'to', new_name]
    @name = new_name
  end

  # Return the master or stack container without caring whether it happens to
  # be first or second under the current reflection setting
  def container(index)
    if flipped?
      outer = 'splitv'
      inner = 'splith'
    else
      outer = 'splith'
      inner = 'splitv'
    end

    if @layout == outer
      if @nodes[index] and @nodes[index]['layout'] == inner
        @nodes[index]
      end
    end
  end

  # Like `container` above, but now we care about getting the actual master
  # container, even if the workspace is reflected
  def master
    first  = container(0)
    second = container(1)
    reflected? && second ? second : first
  end

  # Same as `master` above
  def stack
    first  = container(0)
    second = container(1)
    reflected? && second ? first : second
  end

  def windows(container = {'nodes' => @nodes})
    if container
      container['nodes'].map do |node|
        if node['nodes'] and node['layout'] == 'none'
          [node] + windows(node)
        else
          windows(node)
        end
      end.flatten
    else
      []
    end
  end

  # Return master windows followed by stack windows, even if the master comes
  # after the stack under the current reflection setting.  This ensures the
  # layout algorithm manages the master windows first.
  def ordered_windows
    master_windows = windows(master)
    stack_windows = windows(stack)
    stray_windows = windows - master_windows - stack_windows
    master_windows + stack_windows + stray_windows
  end

  # The main layout algorithm.  This works by managing every window's position,
  # moving each after the last, and generating new splits as needed to maintain
  # one master container and one stack container.
  def layout
    master = master()
    stack = stack()

    if master and windows(master).length > master_cap
      reflow = true
    end

    split = flipped? ? 'splith' : 'splitv'

    ordered_windows.each_with_index do |window, i|
      swaymsg(['mark', '--add', '--toggle', '_moving'], window) if window['marks'].include?('_moving')

      if i == 0
        swaymsg(['layout', split], window) if !master
      elsif i == master_cap
        if flipped?
          direction = reflected? ? 'up' : 'down'
        else
          direction = reflected? ? 'left' : 'right'
        end
        swaymsg(['move', direction], window) if reflow or !stack
        swaymsg([split], window) if !stack
        reset_master_size if !stack
      else
        swaymsg(['move', 'mark', '_previous'], window)
      end
      swaymsg(['mark', '--add', '_previous'], window)
    end

    # Window moves change focus; set it back
    keep_focus
  end

  def reset_master_size
    resize_axis = flipped? ? 'height' : 'width'
    ratio = halved? ? 0.5 : 0.605
    gaps = (@output.rect['width'] - @rect['width']) / 2
    size = @rect[resize_axis] * ratio - gaps / 2
    master_window = windows(master).first
    swaymsg(['resize', 'set', resize_axis, size.round, 'px'], master_window) if master_window
  end

  def focused_window
    windows.find { |window| window['focused'] }
  end

  def keep_focus
    # This works because we don't refresh 'windows' for the lifetime of this object
    window = focused_window
    swaymsg(['focus'], window) if window
  end
end

def monitor
  last_focused = nil

  IO.popen('swaymsg --monitor -t subscribe \'["window"]\'').each do |line|
    node = JSON.parse(line)
    case node['change']
    when 'new', 'close'
      SwayWorkspace.focused.refresh
    when 'move'
      if node['container']['marks'].include?('_moving')
        focused_ws = SwayWorkspace.focused

        # There isn't an easy way to tell which workspace the window is moving
        # from or to, so just layout all workspaces
        SwayWorkspace.all.each(&:refresh)

        # Some moves seem to steal focus, but not all.  This retains the
        # current focused workspace, but might it flicker.
        focused_ws.focus
      end
    when 'focus'
      SwayWorkspace.exec_swaymsg "[con_id=#{last_focused}] mark --add _last_focused" if last_focused
      last_focused = node['container']['id']
    end
  end
end

case ARGV[0]
when 'monitor'
  monitor
when 'inc'
  SwayWorkspace.focused.inc_master_cap(1)
when 'dec'
  SwayWorkspace.focused.inc_master_cap(-1)
when 'toggle_halved'
  SwayWorkspace.focused.toggle_halved
when 'reflect'
  SwayWorkspace.focused.reflect
when 'flip'
  SwayWorkspace.focused.flip
when 'balance'
  SwayWorkspace.focused.balance
when 'swap_up'
  SwayWorkspace.focused.swap_up and SwayWorkspace.focused.refresh
when 'swap_down'
  SwayWorkspace.focused.swap_down and SwayWorkspace.focused.refresh
when 'swap_master'
  SwayWorkspace.focused.swap_master
when 'shrink_master'
  SwayWorkspace.focused.resize_master(-3)
when 'grow_master'
  SwayWorkspace.focused.resize_master(3)
when 'shrink_child'
  SwayWorkspace.focused.resize_child(-3)
when 'grow_child'
  SwayWorkspace.focused.resize_child(3)
when 'focus_next'
  SwayWorkspace.focused.focus_next_window
when 'focus_prev'
  SwayWorkspace.focused.focus_prev_window
when 'refresh'
  SwayWorkspace.focused.refresh
when 'reset'
  ARGV.shift
  SwayWorkspace.reset_focused(ARGV)
when 'move'
  if ARGV[1]
    SwayWorkspace.exec_swaymsg "mark --add --toggle _moving; move workspace number '#{ARGV[1]}'"
  else
    STDERR.puts "Usage: #{$0} move WS"
    exit 1
  end
else
  STDERR.puts "Usage: #{$0} COMMAND"
  exit 1
end
